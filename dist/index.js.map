{"version":3,"sources":["../src/index.js"],"names":["app","use","req","res","next","header","process","env","CORS_LIST","server","http","createServer","io","port","PORT","socket","token","handshake","query","user_id","data","user","on","watsonInstance","sendMessage","text","then","console","log","output","result","generic","length","emit","createSession","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BD,MAAIE,MAAJ,CAAW,6BAAX,EAA0CC,QAAQC,GAAR,CAAYC,SAAtD;AACAL,MAAIE,MAAJ,CAAW,kCAAX,EAA+C,MAA/C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,2BAA3C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,+DAA3C;AACAD;AACD,CAND;;AAQA,MAAMK,SAASC,eAAKC,YAAL,CAAkBX,GAAlB,CAAf;AACA,MAAMY,KAAK,sBAASH,MAAT,CAAX;AACA,MAAMI,OAAOP,QAAQC,GAAR,CAAYO,IAAZ,IAAoB,IAAjC;;AAEA;AACAF,GAAGX,GAAH,CAAO,OAAOc,MAAP,EAAeX,IAAf,KAAwB;AAC7B,QAAMY,QAAQD,OAAOE,SAAP,CAAiBC,KAAjB,CAAuBF,KAArC;AACAD,SAAOE,SAAP,CAAiBE,OAAjB,GAA2B,CAAC,MAAM,uBAAY,EAAEH,KAAF,EAAZ,CAAP,EAA+BI,IAA/B,CAAoCA,IAApC,CAAyCC,IAAzC,CAA8CF,OAAzE;AACA,SAAOf,MAAP;AACD,CAJD;;AAMAQ,GAAGU,EAAH,CAAM,YAAN,EAAoB,UAASP,MAAT,EAAiB;AACnC,QAAMI,UAAUJ,OAAOE,SAAP,CAAiBE,OAAjC;AACA,QAAMI,iBAAiB,uBAAvB;;AAEA,QAAMC,cAAc,CAAC,EAAET,MAAF,EAAUQ,cAAV,EAA0BE,IAA1B,EAAgCN,OAAhC,EAAD,KAA+C;AACjEI,mBAAeC,WAAf,CAA2B,EAAEC,IAAF,EAAQN,OAAR,EAA3B,EACGO,IADH,CACQvB,OAAO;AACXwB,cAAQC,GAAR,CAAYzB,GAAZ;AACA,YAAM0B,SAAS1B,IAAI2B,MAAJ,CAAWD,MAA1B;AACA,UAAIA,OAAOE,OAAP,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/BjB,eAAOkB,IAAP,CAAY,SAAZ,EAAuB,oCAAvB;AACD,OAFD,MAEO;AACLlB,eAAOkB,IAAP,CAAY,SAAZ,EAAuBJ,OAAOE,OAAP,CAAe,CAAf,EAAkBN,IAAzC;AACD;AACF,KATH;AAUD,GAXD;;AAaAF,iBAAeW,aAAf,GAA+BR,IAA/B,CAAoC,MAAM;AACxCF,gBAAY,EAAEC,MAAM,EAAR,EAAYF,cAAZ,EAA4BR,MAA5B,EAAoCI,OAApC,EAAZ;AACAJ,WAAOO,EAAP,CAAU,SAAV,EAAsBG,IAAD,IAAU;AAC7BD,kBAAY,EAAEC,IAAF,EAAQF,cAAR,EAAwBR,MAAxB,EAAgCI,OAAhC,EAAZ;AACD,KAFD;AAGD,GALD;AAMD,CAvBD;;AAyBAV,OAAO0B,MAAP,CAActB,IAAd,EAAoB,YAAW;AAC7Bc,UAAQC,GAAR,CAAa,kBAAiBf,IAAK,EAAnC;AACD,CAFD","file":"index.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport socketIO from 'socket.io';\nimport watson from '~/services/watson';\nimport { authorizate } from '~/services/auth';\n\nconst app = express();\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", process.env.CORS_LIST);\n  res.header(\"Access-Control-Allow-Credentials\", \"true\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET,HEAD,OPTIONS,POST,PUT\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n  next()\n})\n\nconst server = http.createServer(app);\nconst io = socketIO(server);\nconst port = process.env.PORT || 3000;\n\n// io.origins(process.env.CORS_LIST);\nio.use(async (socket, next) => {\n  const token = socket.handshake.query.token;\n  socket.handshake.user_id = (await authorizate({ token })).data.data.user.user_id\n  return next();\n});\n\nio.on('connection', function(socket) {\n  const user_id = socket.handshake.user_id;\n  const watsonInstance = watson();\n\n  const sendMessage = ({ socket, watsonInstance, text, user_id }) => {\n    watsonInstance.sendMessage({ text, user_id })\n      .then(res => {\n        console.log(res)\n        const output = res.result.output;\n        if (output.generic.length === 0) {\n          socket.emit('message', 'Error ocurred, please contact devs');\n        } else {\n          socket.emit('message', output.generic[0].text);\n        }\n      });\n  }\n\n  watsonInstance.createSession().then(() => {\n    sendMessage({ text: '', watsonInstance, socket, user_id })\n    socket.on('message', (text) => {\n      sendMessage({ text, watsonInstance, socket, user_id })\n    });\n  });\n});\n\nserver.listen(port, function() {\n  console.log(`listening on *:${port}`);\n});\n"]}