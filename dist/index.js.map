{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","io","port","process","env","PORT","origins","CORS_LIST","use","socket","next","token","handshake","query","user_id","data","user","on","watsonInstance","sendMessage","text","then","res","output","result","emit","generic","createSession","listen","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,MAAM,wBAAZ;AACA,MAAMC,SAASC,eAAKC,YAAL,CAAkBH,GAAlB,CAAf;AACA,MAAMI,KAAK,sBAASH,MAAT,CAAX;AACA,MAAMI,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEAJ,GAAGK,OAAH,CAAWH,QAAQC,GAAR,CAAYG,SAAvB;AACAN,GAAGO,GAAH,CAAO,OAAOC,MAAP,EAAeC,IAAf,KAAwB;AAC7B,QAAMC,QAAQF,OAAOG,SAAP,CAAiBC,KAAjB,CAAuBF,KAArC;AACAF,SAAOG,SAAP,CAAiBE,OAAjB,GAA2B,CAAC,MAAM,uBAAY,EAAEH,KAAF,EAAZ,CAAP,EAA+BI,IAA/B,CAAoCA,IAApC,CAAyCC,IAAzC,CAA8CF,OAAzE;AACA,SAAOJ,MAAP;AACD,CAJD;;AAMAT,GAAGgB,EAAH,CAAM,YAAN,EAAoB,UAASR,MAAT,EAAiB;AACnC,QAAMK,UAAUL,OAAOG,SAAP,CAAiBE,OAAjC;AACA,QAAMI,iBAAiB,uBAAvB;;AAEA,QAAMC,cAAc,CAAC,EAAEV,MAAF,EAAUS,cAAV,EAA0BE,IAA1B,EAAgCN,OAAhC,EAAD,KAA+C;AACjEI,mBAAeC,WAAf,CAA2B,EAAEC,IAAF,EAAQN,OAAR,EAA3B,EACGO,IADH,CACQC,OAAO;AACX,YAAMC,SAASD,IAAIE,MAAJ,CAAWD,MAA1B;AACAd,aAAOgB,IAAP,CAAY,SAAZ,EAAuBF,OAAOG,OAAP,CAAe,CAAf,EAAkBN,IAAzC;AACD,KAJH;AAKD,GAND;;AAQAF,iBAAeS,aAAf,GAA+BN,IAA/B,CAAoC,MAAM;AACxCF,gBAAY,EAAEC,MAAM,EAAR,EAAYF,cAAZ,EAA4BT,MAA5B,EAAoCK,OAApC,EAAZ;AACAL,WAAOQ,EAAP,CAAU,SAAV,EAAsBG,IAAD,IAAU;AAC7BD,kBAAY,EAAEC,IAAF,EAAQF,cAAR,EAAwBT,MAAxB,EAAgCK,OAAhC,EAAZ;AACD,KAFD;AAGD,GALD;AAMD,CAlBD;;AAoBAhB,OAAO8B,MAAP,CAAc1B,IAAd,EAAoB,YAAW;AAC7B2B,UAAQC,GAAR,CAAa,kBAAiB5B,IAAK,EAAnC;AACD,CAFD","file":"index.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport socketIO from 'socket.io';\nimport watson from '~/services/watson';\nimport { authorizate } from '~/services/auth';\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server);\nconst port = process.env.PORT || 3000;\n\nio.origins(process.env.CORS_LIST);\nio.use(async (socket, next) => {\n  const token = socket.handshake.query.token;\n  socket.handshake.user_id = (await authorizate({ token })).data.data.user.user_id\n  return next();\n});\n\nio.on('connection', function(socket) {\n  const user_id = socket.handshake.user_id;\n  const watsonInstance = watson();\n\n  const sendMessage = ({ socket, watsonInstance, text, user_id }) => {\n    watsonInstance.sendMessage({ text, user_id })\n      .then(res => {\n        const output = res.result.output;\n        socket.emit('message', output.generic[0].text);\n      });\n  }\n\n  watsonInstance.createSession().then(() => {\n    sendMessage({ text: '', watsonInstance, socket, user_id })\n    socket.on('message', (text) => {\n      sendMessage({ text, watsonInstance, socket, user_id })\n    });\n  });\n});\n\nserver.listen(port, function() {\n  console.log(`listening on *:${port}`);\n});\n"]}